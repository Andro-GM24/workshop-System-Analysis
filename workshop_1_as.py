# -*- coding: utf-8 -*-
"""workshop#1_AS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FFLnZm86hgL4ecyuEvzCWJfhFJZps9AA
"""

import random
def create_sequence():
    nucleotid_bases = ['A','C','T','G']
    size_sequence = random.randint(10,20)
    new_sequence=[nucleotid_bases[random.randint(0,3)]for i in range(size_sequence)]
    return "".join(new_sequence)




def create_data_base(db_size):

      data_base = [create_sequence() for i in range (db_size)]
      return data_base

print(create_data_base(50000))

from itertools import count

def get_combinations(n,sequences, bases):
    if n == 1:
      return [sequence+base for sequence in sequences for base in bases]
    else:
      sequence = [sequence+base for sequence in sequences for base in bases]
      return get_combinations(n-1,sequence,bases)

def count_motif(motif, sequences_db):
  count= 0
  for sequence in sequences_db:
      count += sequence.count(motif)
      return count

def get_motif(motif_size, sequences_db):
  nucleotid_bases = ['A','C','T','G']
  combinations = get_combinations(motif_size,[""],nucleotid_bases)
  max_counter = 0
  motif_winner = ""
  for motif_candidate in combinations:
      temp_counter = count_motif(motif_candidate, sequences_db )

      if temp_counter > max_counter:
          max_counter = temp_counter
          motif_winner = motif_candidate
  return motif_winner, max_counter

def get_motif(motif_size, sequences_db):
  nucleotid_bases = ['A','C','G','T']
  combinations = get_combinations(motif_size,[""],nucleotid_bases)
  max_counter = 0
  motif_winner = ""
  for motif_candidate in combinations:
      temp_counter = count_motif(motif_candidate, sequences_db )

      if temp_counter > max_counter:
          max_counter = temp_counter
          motif_winner = motif_candidate
  return motif_winner, max_counter

print(get_motif(6,create_data_base(50000)))

for size in [6,8]:
  print(f"\nMotifs of size :{ size}")
  for i in range(10):
    print(get_motif(size, create_data_base(50000)))

import math

def calcute_shannon_entrophy(  sequence):
  base_counts = {}
  total_bases = len(sequence)

  entrophy=0

  for base in sequence:
    if base in base_counts:
      base_counts[base] +=1
    else:
        base_counts[base] =1

  probability = [count/total_bases for count in base_counts.values()]
  entrophy=-np.sum(probability*np.log2(probability))

  return entrophy

def filter_shannon(sequence) -> bool :
  filter=False
  for base in sequence:
    if calculate_shannon_entrophy(sequence)<1/4:
        return True
    else:
      return false

for size in [6,8]:
  print(f"\nArter filter, motifs of size:{size}")
  for i in range(10):
    dataset = create_data_base(50000)
    dataset = list(filter(filter_shannon,dataset))
    print(f"Dataset size: {len(dataset)}, Motif: {get_motif(size, dataset)}")